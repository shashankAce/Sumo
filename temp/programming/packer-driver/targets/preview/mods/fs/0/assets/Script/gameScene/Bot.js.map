{"version":3,"sources":["file:///Users/shashankchaurasia/CocosWorkspace/Sumo/assets/Script/gameScene/Bot.ts"],"names":["_decorator","Component","Node","Vec3","SkeletalAnimationComponent","ccclass","property","CELL_TIME","SPEED","MAXDISTANCE","Bot","type","ZERO","STATE","IDLE","start","_skeletal","node","getComponent","play","update","deltaTime","_now_time","fix_update","direction","player","getPosition","x","y","z","angle","Math","atan2","PI","eulerAngles","distance","getDistance","normalize","_movement","_currentState","WALK","xA","yA","xB","yB","xDiff","yDiff","sqrt","pow","dt","setPosition","position","add3f"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Vec3, SkeletalAnimationComponent, macro } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = Bot\r\n * DateTime = Wed Oct 06 2021 13:10:22 GMT+0530 (India Standard Time)\r\n * Author = sushant\r\n * FileBasename = Bot.ts\r\n * FileBasenameNoExtension = Bot\r\n * URL = db://assets/script/Player/Bot/Bot.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/\r\n *\r\n */\r\nconst CELL_TIME = 0.016;\r\nconst SPEED = 2;\r\nconst MAXDISTANCE = 2;\r\nconst enum STATE  {\r\n    IDLE,\r\n    WALK,\r\n    BUMP,\r\n}\r\n \r\n@ccclass('Bot')\r\nexport class Bot extends Component {\r\n    \r\n    \r\n    @property({ type: Node })\r\n    public player = null;\r\n\r\n    private _now_time = 0;\r\n    private _movement: Vec3 = Vec3.ZERO;\r\n    private _skeletal: SkeletalAnimationComponent;\r\n    private _currentState = STATE.IDLE;\r\n\r\n    start () {\r\n        this._skeletal = this.node.getComponent(SkeletalAnimationComponent);\r\n        this._skeletal.play('Armature|idle');\r\n\r\n        /* setInterval(() => {\r\n            let direction = new Vec3(this.player.getPosition().x - this.node.getPosition().x,this.player.getPosition().y - this.node.getPosition().y,this.player.getPosition().z - this.node.getPosition().z);\r\n\r\n            let angle = (Math.atan2(direction.x,direction.z)) * 180 / Math.PI;   \r\n            this.node.eulerAngles = new Vec3(0, angle, 0);\r\n        }, 500); */\r\n    }\r\n\r\n    update (deltaTime: number) {\r\n        \r\n        this._now_time += deltaTime;\r\n        // this.fix_update(CELL_TIME);\r\n        while (this._now_time >= CELL_TIME) {\r\n            this.fix_update(CELL_TIME);\r\n            this._now_time -= CELL_TIME;\r\n        }\r\n\r\n\r\n        let direction = new Vec3(this.player.getPosition().x - this.node.getPosition().x,this.player.getPosition().y - this.node.getPosition().y,this.player.getPosition().z - this.node.getPosition().z);\r\n\r\n        let angle = (Math.atan2(direction.x,direction.z)) * 180 / Math.PI;   \r\n        this.node.eulerAngles = new Vec3(0, angle, 0);\r\n\r\n\r\n        let distance = this.getDistance(this.player.getPosition().x,this.player.getPosition().z,this.node.getPosition().x,this.node.getPosition().z);\r\n        if(distance > MAXDISTANCE)\r\n        {\r\n            direction.normalize();\r\n            this._movement = direction;\r\n            if(this._currentState == STATE.IDLE){\r\n                this._currentState = STATE.WALK;\r\n                this._skeletal.play('Armature|walk');\r\n            }\r\n        }\r\n        else{\r\n            this._movement = Vec3.ZERO;\r\n            if(this._currentState == STATE.WALK){\r\n                this._currentState = STATE.IDLE;\r\n                this._skeletal.play('Armature|idle');\r\n            }\r\n        }\r\n    }\r\n\r\n    getDistance(xA: number, yA: number, xB: number, yB: number) { \r\n        let xDiff = xA - xB; \r\n        let yDiff = yA - yB; \r\n    \r\n        return Math.sqrt( Math.pow(xDiff,2) +  Math.pow(yDiff,2));\r\n    }\r\n\r\n    fix_update(dt: number) {\r\n        this.node.setPosition(this.node.position.add3f(this._movement.x * SPEED * dt, 0, this._movement.z * SPEED * dt));\r\n    }\r\n}"]}