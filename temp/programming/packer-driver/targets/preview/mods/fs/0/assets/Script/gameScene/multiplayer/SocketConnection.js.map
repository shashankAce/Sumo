{"version":3,"sources":["file:///Users/shashankchaurasia/CocosWorkspace/Sumo/assets/Script/gameScene/multiplayer/SocketConnection.ts"],"names":["Component","_decorator","Colyseus","ccclass","property","SocketConnection","start","url","useSSL","hostname","includes","port","client","Client","console","log","connect","joinOrCreate","room","sessionId","onStateChange","state","onLeave","code","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AACbC,MAAAA,Q;;;;;;;AAECC,MAAAA,O,GAAsBF,U,CAAtBE,O;AAASC,MAAAA,Q,GAAaH,U,CAAbG,Q;;kCAGJC,gB,WADZF,OAAO,CAAC,kBAAD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;eAaJG,K,GAAA,iBAAQ;AACJ;AACA;;AAEA;AACR;AAEQ,cAAIC,GAAG,IAAM,KAAKC,MAAL,GAAc,KAAd,GAAsB,IAA5B,YAAsC,KAAKC,QAA3C,IAAuD,CAAC,GAAD,EAAM,EAAN,EAAUC,QAAV,CAAmB,KAAKC,IAAxB,KAAiC,KAAKH,MAAvC,GAAiD,EAAjD,SAA0D,KAAKG,IAArH,CAAP;AACA,eAAKC,MAAL,GAAc,IAAI;AAAA;AAAA,oCAASC,MAAb,EAAuB,KAAKL,MAAL,GAAc,KAAd,GAAsB,IAA7C,YAAuD,KAAKC,QAA5D,IAAwE,CAAC,GAAD,EAAM,EAAN,EAAUC,QAAV,CAAmB,KAAKC,IAAxB,KAAiC,KAAKH,MAAvC,GAAiD,EAAjD,SAA0D,KAAKG,IAAtI,EAAd;AAEAG,UAAAA,OAAO,CAACC,GAAR,2BAAoCR,GAApC;AACA,eAAKS,OAAL;AACH,S;;eAGKA,O;iFAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAE0B,KAAKJ,MAAL,CAAYK,YAAZ,CAAyB,UAAzB,CAF1B;;AAAA;AAEQ,yBAAKC,IAFb;AAKQJ,oBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,oBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,KAAKG,IAAL,CAAUC,SAA3C;AAEA,yBAAKD,IAAL,CAAUE,aAAV,CAAwB,UAACC,KAAD,EAAW;AAC/BP,sBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,KAA/B;AACH,qBAFD;AAIA,yBAAKH,IAAL,CAAUI,OAAV,CAAkB,UAACC,IAAD,EAAU;AACxBT,sBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBQ,IAAxB;AACH,qBAFD;AAZR;AAAA;;AAAA;AAAA;AAAA;AAiBQT,oBAAAA,OAAO,CAACU,KAAR;;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,W;;;;;;;;;;QA3BkCxB,S,oFAKjCI,Q;;;;;iBAAoB,W;;+EACpBA,Q;;;;;iBAAgB,I;;iFAChBA,Q;;;;;iBAAkB,K","sourcesContent":["\nimport { Component, _decorator } from 'cc';\nimport Colyseus from 'db://colyseus-sdk/colyseus.js';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SocketConnection')\nexport class SocketConnection extends Component {\n\n    playerName: string;\n    isConnected: boolean;\n\n    @property hostname = \"localhost\";\n    @property port = 2567;\n    @property useSSL = false;\n\n    client!: Colyseus.Client;\n    room!: Colyseus.Room;\n\n    start() {\n        // Instantiate Colyseus Client\n        // connects into (ws|wss)://hostname[:port]\n\n        /* let domain = window.location.href.split('/')[2];\n        let url = \"ws://\" + domain.split(':')[0] + ':2567'; */\n\n        let url = `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`;\n        this.client = new Colyseus.Client(`${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}${([443, 80].includes(this.port) || this.useSSL) ? \"\" : `:${this.port}`}`);\n\n        console.log(`Connecting server to ${url}`);\n        this.connect();\n    }\n\n\n    async connect() {\n        try {\n            this.room = await this.client.joinOrCreate(\"SumoRoom\");\n\n\n            console.log(\"Room joined successfully!\");\n            console.log(\"user's sessionId:\", this.room.sessionId);\n\n            this.room.onStateChange((state) => {\n                console.log(\"onStateChange: \", state);\n            });\n\n            this.room.onLeave((code) => {\n                console.log(\"onLeave:\", code);\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n"]}