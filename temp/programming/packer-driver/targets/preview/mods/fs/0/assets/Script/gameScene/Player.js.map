{"version":3,"sources":["file:///Users/shashankchaurasia/CocosWorkspace/Sumo/assets/Script/gameScene/Player.ts"],"names":["_decorator","Component","Vec3","Node","macro","SkeletalAnimationComponent","BoxCollider","RigidBodyComponent","ccclass","property","CELL_TIME","SPEED","BUMPVALUE","Player","type","ZERO","STATE","IDLE","start","_skeletal","node","getComponent","play","collider","on","_onCollisionEnter","event","otherCollider","name","console","log","_currentPlayerPosition","_vector","x","y","_currentState","BUMP","applyImpulse","setTimeout","clearVelocity","touchCallBack","vector","angle","rotateZ","playerCamera","eulerAngles","RAD","normalize","touchAngleCallBack","_vectorAngle","fix_update","dt","lengthSqr","WALK","setPosition","position","add3f","update","deltaTime","_now_time"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Vec3, Node, macro, SkeletalAnimationComponent, BoxCollider, ICollisionEvent, RigidBodyComponent } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = Player\r\n * DateTime = Fri Sep 24 2021 14:15:01 GMT+0530 (India Standard Time)\r\n * Author = shashankA\r\n * FileBasename = Player.ts\r\n * FileBasenameNoExtension = Player\r\n * URL = db://assets/Script/Player.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/\r\n *\r\n */\r\nconst CELL_TIME = 0.016;\r\nconst SPEED = 4;\r\nconst BUMPVALUE = 4;\r\nconst enum STATE  {\r\n    IDLE,\r\n    WALK,\r\n    BUMP,\r\n}\r\n\r\n@ccclass('Player')\r\nexport class Player extends Component {\r\n\r\n\r\n    @property({ type: Node })\r\n    playerCamera: Node = null;\r\n    private _currentPlayerPosition: Vec3 = Vec3.ZERO;\r\n    private _vector: Vec3 = Vec3.ZERO;\r\n    private _vectorAngle: Vec3 = Vec3.ZERO;\r\n    private _now_time = 0;\r\n    private _skeletal: SkeletalAnimationComponent;\r\n    private _currentState = STATE.IDLE;\r\n    \r\n    start() {\r\n        this._skeletal = this.node.getComponent(SkeletalAnimationComponent);\r\n        this._skeletal.play('Armature|idle');\r\n\r\n\r\n        const collider = this.node.getComponent(BoxCollider)!;\r\n        collider.on('onCollisionEnter', this._onCollisionEnter, this);\r\n    }\r\n\r\n    private _onCollisionEnter(event: ICollisionEvent) {\r\n        const otherCollider = event.otherCollider;\r\n        if(otherCollider.node.name === 'platform'){\r\n            return;\r\n        }\r\n        console.log(\"COLLIDED ------- \"+this._currentPlayerPosition);\r\n        console.log(\"COLLIDED ------- \"+this._vector.x+\"    \"+this._vector.y);\r\n        this._currentState = STATE.BUMP;\r\n        this.getComponent(RigidBodyComponent).applyImpulse(new Vec3(this._vector.x* BUMPVALUE * -1, 0, this._vector.y* BUMPVALUE ));\r\n\r\n\r\n        setTimeout(() => {\r\n            this.getComponent(RigidBodyComponent).clearVelocity();\r\n            this._currentState = STATE.IDLE;\r\n          }, 1000);\r\n\r\n\r\n        // const otherRigidBody = otherCollider.node.getComponent(RigidBody)!;\r\n        // otherRigidBody.useGravity = true;\r\n        // otherRigidBody.applyForce(new Vec3(0, 3000, -1500), new Vec3(0, 0.5, 0));\r\n\r\n        // const collider = event.selfCollider;\r\n        // collider.addMask(Constants.CarGroup.NORMAL);\r\n        // const rigidBody = this.node.getComponent(RigidBody)!;\r\n        // rigidBody.useGravity = true;\r\n        // this._runState = RunState.CRASH;\r\n        // AudioManager.playSound(Constants.AudioSource.CRASH);\r\n        // CustomEventListener.dispatchEvent(EventName.GAME_OVER);\r\n    }\r\n\r\n    touchCallBack(vector: Vec3, angle: number) {\r\n        Vec3.rotateZ(vector, vector, Vec3.ZERO, this.playerCamera.eulerAngles.y * macro.RAD);\r\n        this._vector = vector.normalize();\r\n        if (angle) {\r\n            this.node.eulerAngles = new Vec3(0, angle + 90 + this.playerCamera.eulerAngles.y, 0);\r\n        }\r\n    }\r\n\r\n    touchAngleCallBack(vector: Vec3, angle: number) {\r\n        this._vectorAngle = vector.normalize();\r\n    }\r\n\r\n    fix_update(dt: number) {\r\n        if(this._currentState == STATE.BUMP)\r\n            return;\r\n        if (this._vector.lengthSqr() > 0) {\r\n            if(this._currentState == STATE.IDLE){\r\n                this._currentState = STATE.WALK;\r\n                this._skeletal.play('Armature|walk');\r\n            }\r\n            this.node.setPosition(this.node.position.add3f(this._vector.x * SPEED * dt, 0, -this._vector.y * SPEED * dt));\r\n\r\n            this._currentPlayerPosition = new Vec3(this._vector.x,0,this._vector.y);\r\n\r\n            this.playerCamera.setPosition(this.playerCamera.position.add3f(this._vector.x * SPEED * dt, 0, 0));\r\n        }\r\n        else{\r\n            if(this._currentState == STATE.WALK){\r\n                this._currentState = STATE.IDLE;\r\n                this._skeletal.play('Armature|idle');\r\n            }\r\n        }\r\n\r\n        if (this._vectorAngle.lengthSqr() > 0) {\r\n            this.playerCamera.eulerAngles = this.playerCamera.eulerAngles.add3f(0, -this._vectorAngle.x, 0);\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this._now_time += deltaTime;\r\n        // this.fix_update(CELL_TIME);\r\n        while (this._now_time >= CELL_TIME) {\r\n            this.fix_update(CELL_TIME);\r\n            this._now_time -= CELL_TIME;\r\n        }\r\n    }\r\n}"]}